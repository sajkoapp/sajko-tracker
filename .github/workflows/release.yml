name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build packages
        run: npm run build
      
      - name: Set version
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version }} --workspaces --no-git-tag-version
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "chore: release v${{ github.event.inputs.version }}"
          git tag v${{ github.event.inputs.version }}
      
      - name: Publish to NPM
        run: |
          npm publish --workspaces --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            packages/*/dist/**/*.js
            packages/*/dist/**/*.d.ts
            cdn/v4/*.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload to CDN
        run: |
          # Upload CDN files to your CDN provider
          # This is a placeholder - implement based on your CDN
          echo "Uploading to CDN..."
          # aws s3 sync cdn/v4 s3://cdn.sajko.app/v4 --acl public-read
      
      - name: Update documentation
        run: |
          npm run docs:build
          # Deploy docs to your documentation site
          echo "Deploying documentation..."

  publish-cdn:
    name: Publish CDN Assets
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Build CDN assets
        run: |
          npm ci
          npm run build:cdn
      
      - name: Deploy to Cloudflare
        if: env.CF_ZONE_ID != ''
        run: |
          # Upload to Cloudflare R2 or Pages
          echo "Deploying to Cloudflare..."
        env:
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      
      - name: Deploy to AWS S3
        if: env.AWS_S3_BUCKET != ''
        run: |
          # Upload to S3 + CloudFront invalidation
          echo "Deploying to AWS S3..."
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Purge CDN cache
        run: |
          # Purge CDN cache for updated files
          echo "Purging CDN cache..."

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sajko/tracker:latest
            sajko/tracker:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max